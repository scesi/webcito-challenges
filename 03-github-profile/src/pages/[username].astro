---
import { getProfileData, getUserRepos } from '@services/profile.service';
import type { ProfileData, RepoData } from '../types';

import Layout from '@/src/layouts/Layout.astro';
import Main from '@/src/components/sections/main/Main';
import Profile from '@components/sections/profile-aside/Profile.astro';

import GithubGod from '/public/favicon.svg';
import '@/src/globals.css';

const { username = 'diegodev-01' } = Astro.params;
Astro.response.headers.set('Cache-Control', 'public, s-maxage=31536000000, stale-while-revalidate=30');

let profileData: ProfileData = {
  name: '',
  bio: '',
  location: '',
  followers: 0,
  following: 0,
  repos: 0,
  avatar_url: '',
  nickname: '',
  stars: 0,
  linkedin_username: '',
  twitter_username: '',
  website: '',
  topics: [],
};
let repoData: RepoData[] = [];
let notFound = false;
try {
  profileData = await getProfileData(username || 'diegodev-01');
  repoData = await getUserRepos(username || 'diegodev-01');
} catch (error) {
  console.error('Error fetching data:', error);
  notFound = true;
}
---

<Layout>
  <form
    id="user-form"
    onsubmit="event.preventDefault(); const u = this.username.value.trim(); if(u) location.href = `/${u}`"
  >
    <input
      type="text"
      name="username"
      value={username}
      placeholder="Enter GitHub username"
    />
    <button type="submit">Buscar</button>
  </form>
  {
    notFound ? (
      <div class="not-found">
        <GithubGod />
        <span>
        <h2>User not found</h2>
        <p>Please check the username and try again.</p>
        </span>
      </div>
    ) : (
      <Profile data={profileData} />
      <Main
        username={username}
        repoCount={profileData.repos}
        repoData={repoData}
        client:only="react"
      />
    )
  }
</Layout>

<style>
  form {
    display: flex;
    position: absolute;
    top: 3.3em;
    right: 5em;
    z-index: 100;
  }

  input {
    padding: 0.5em;
    border-radius: 0.5em;
    border: 1px solid var(--grey);
    background-color: transparent;
    color: white;
    margin-right: 0.5em;
    font-size: 1em;
  }

  button {
    background-color: var(--button--bg);
    color: var(--button--color);
    padding: 0.5em 1em;
    border-radius: 0.5em;
    border: 1px solid var(--grey);
    cursor: pointer;
  }

  .not-found {
      display: flex;
      margin-inline:  auto;
      align-items: center;
      margin-top: 5em;
      gap: 5em;
    }

  @media screen and (max-width: 768px) {
    form {
      position: static;
      margin: 100%;
      top: auto;
      right: auto;
      margin: 1em 0em;
      display: flex;
      gap: 0.5em;
    }

    input {
      width: 100%;
      margin-right: 0;
    }

    .not-found{
      flex-direction: column;
      margin-top: 5em;
      text-align: center;
      gap: 1em;
    }
  }
</style>
